import logging
import os
from datetime import datetime
from decimal import Decimal

import aiohttp
from fastapi_mail import FastMail, MessageSchema
from src.data.unitofwork import IUnitOfWork
from src.email_config import mail_conf
from src.schemas.alerts import AlertCreate, AlertUpdate

logger = logging.getLogger(__name__)


class AlertService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ –æ –∫—É—Ä—Å–∞—Ö –≤–∞–ª—é—Ç"""

    def __init__(self, uow: IUnitOfWork):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ —Å Unit of Work"""
        self.uow = uow

    async def create_alert(self, alert: AlertCreate):
        """
        –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ

        Args:
            alert: –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è

        Returns:
            int: ID —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        """
        data = alert.model_dump()
        async with self.uow:
            id = await self.uow.alert.add_one(data)
            await self.uow.commit()
            return id

    async def find_alert_by_now_time(self, hour: int):
        """
        –ù–∞–π—Ç–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Å–∞

        Args:
            hour: –¢–µ–∫—É—â–∏–π —á–∞—Å (0-23)

        Returns:
            List[Alert]: –°–ø–∏—Å–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        """
        list_alerts = await self.uow.alert.find_alert_by_now_time(hour)
        return list_alerts

    async def find_alert_by_user_id(self, user_id: int):
        """
        –ù–∞–π—Ç–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        Returns:
            Alert | None: –ù–∞–π–¥–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏–ª–∏ None
        """
        async with self.uow:
            alert = await self.uow.alert.find_one(user_id=user_id)
            return alert

    async def send_email_alert(self, email: str, currency_code: str, rate: Decimal):
        """
        –û—Ç–ø—Ä–∞–≤–∏—Ç—å email-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫—É—Ä—Å–∞

        Args:
            email: Email –∞–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è
            currency_code: –ö–æ–¥ –≤–∞–ª—é—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä 'USD')
            rate: –¢–µ–∫—É—â–∏–π –∫—É—Ä—Å –≤–∞–ª—é—Ç—ã

        –§–æ—Ä–º–∏—Ä—É–µ—Ç –∫—Ä–∞—Å–∏–≤–æ–µ HTML-–ø–∏—Å—å–º–æ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫—É—Ä—Å–µ
        """
        html_content = f"""
        <html>
        <body>
            <h2 style="color: #2a52be;">–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç—ã</h2>
            <p>–ö—É—Ä—Å <strong>{currency_code}</strong> –∏–∑–º–µ–Ω–∏–ª—Å—è:</p>
            <div style="background: #f5f5f5; padding: 15px; border-radius: 5px;">
                <p style="font-size: 24px; margin: 0;">
                    <strong>{float(rate):.4f}</strong> —Ä—É–±.
                </p>
            </div>
            <p style="color: #666; font-size: 12px;">
                –î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {datetime.now().strftime('%d.%m.%Y %H:%M')}
            </p>
        </body>
        </html>
        """

        message = MessageSchema(
            subject=f"üí∞ –ö—É—Ä—Å {currency_code} –æ–±–Ω–æ–≤–ª—ë–Ω",
            recipients=[email],
            body=html_content,
            subtype="html"
        )

        fm = FastMail(mail_conf)
        await fm.send_message(message)

    async def send_tg_alert(self, unique_id: str, currency_code: str, rate: Decimal):
        """
        –û—Ç–ø—Ä–∞–≤–∏—Ç—å Telegram-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫—É—Ä—Å–∞

        Args:
            unique_id: –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
            currency_code: –ö–æ–¥ –≤–∞–ª—é—Ç—ã
            rate: –¢–µ–∫—É—â–∏–π –∫—É—Ä—Å

        Returns:
            bool: True –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É—Å–ø–µ—à–Ω–∞, False –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        """
        async with aiohttp.ClientSession() as session:
            async with session.post(
                    "http://localhost:8000/send_message",
                    headers={"X-Webhook-Secret": os.getenv("WEBHOOK_SECRET")},
                    json={
                        "unique_id": unique_id,
                        "text": f"–¢–µ–∫—É—â–∏–π –∫—É—Ä—Å {currency_code}: {rate}"
                    }
            ) as response:
                if response.status == 200:
                    logger.info(f"Telegram message sent to unique_id={unique_id}")
                    return True
                else:
                    logger.warning(f"Failed to send Telegram message to unique_id={unique_id}: {response.status}")
                    return False

    async def update_alert(self, alert: AlertUpdate):
        """
        –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è

        Args:
            alert: –ù–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è

        Returns:
            int: ID –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        """
        data = alert.model_dump()
        async with self.uow:
            id = await self.uow.alert.edit_one(data['id'], data)
            await self.uow.commit()
            return id