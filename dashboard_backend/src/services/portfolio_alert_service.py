import os
from datetime import datetime, timezone
from decimal import Decimal

import aiohttp
from fastapi_mail import MessageSchema, FastMail

from src.data.unitofwork import IUnitOfWork
from src.email_config import mail_conf
from src.schemas.alerts import AlertPortfolioCreate, AlertPortfolioRead, AlertPortfolioUpdate


class PortfolioAlertService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ –ø–æ –ø–æ—Ä—Ç—Ñ–µ–ª—è–º"""

    def __init__(self, uow: IUnitOfWork):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ —Å Unit of Work"""
        self.uow = uow

    async def create_alert(self, alert: AlertPortfolioCreate):
        """
        –°–æ–∑–¥–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –ø–æ—Ä—Ç—Ñ–µ–ª—è

        Args:
            alert: –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è

        Returns:
            int: ID —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        """
        data = alert.model_dump()
        async with self.uow:
            id = await self.uow.alert_portfolio.add_one(data)
            await self.uow.commit()
            return id

    async def get_active_alerts(self):
        """
        –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è

        Returns:
            List[AlertPortfolioRead]: –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        """
        list_alerts = await self.uow.alert_portfolio.find_all(page=1, limit=0, is_active=True)
        return list_alerts

    async def update_alert(self, alert: AlertPortfolioUpdate):
        """
        –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è

        Args:
            alert: –ù–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è

        Returns:
            int: ID –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        """
        async with self.uow:
            id = await self.uow.alert_portfolio.edit_one(id=alert.id, data=alert.model_dump())
            await self.uow.commit()
            return id

    async def find_alert_by_portfolio_id(self, portfolio_id: int):
        """
        –ù–∞–π—Ç–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ ID –ø–æ—Ä—Ç—Ñ–µ–ª—è

        Args:
            portfolio_id: ID –ø–æ—Ä—Ç—Ñ–µ–ª—è

        Returns:
            AlertPortfolioRead | None: –ù–∞–π–¥–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏–ª–∏ None
        """
        async with self.uow:
            alert = await self.uow.alert_portfolio.find_one(portfolio_id=portfolio_id)
            return alert

    async def find_alert_by_user_id(self, user_id: int):
        """
        –ù–∞–π—Ç–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        Returns:
            AlertPortfolioRead | None: –ù–∞–π–¥–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏–ª–∏ None
        """
        async with self.uow:
            alert = await self.uow.alert_portfolio.find_one(user_id=user_id)
            return alert

    async def find_all_alerts(self):
        """
        –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è

        Returns:
            List[AlertPortfolioRead]: –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        """
        async with self.uow:
            alerts = await self.uow.alert_portfolio.find_all(page=1, limit=0)
            return alerts

    async def send_portfolio_email_alert(self, email: str, alert: AlertPortfolioRead,
                                         current_value: Decimal, profit_percent: float):
        """
        –û—Ç–ø—Ä–∞–≤–∏—Ç—å email-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è

        Args:
            email: Email –∞–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è
            alert: –î–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            current_value: –¢–µ–∫—É—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—è
            profit_percent: –ü—Ä–æ—Ü–µ–Ω—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–æ–∏–º–æ—Å—Ç–∏

        –§–æ—Ä–º–∏—Ä—É–µ—Ç HTML-–ø–∏—Å—å–º–æ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è
        """
        change_type = "–≤—ã—Ä–æ—Å" if profit_percent >= 0 else "—É–ø–∞–ª"

        html_content = f"""
        <html>
        <body>
            <h2 style="color: #2a52be;">–°—Ä–∞–±–æ—Ç–∞–ª–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ –ø–æ—Ä—Ç—Ñ–µ–ª—é</h2>
            <p>–°—Ç–æ–∏–º–æ—Å—Ç—å –≤–∞—à–µ–≥–æ –ø–æ—Ä—Ç—Ñ–µ–ª—è <strong>#{alert.portfolio_id}</strong> {change_type} –Ω–∞:</p>
            <div style="background: #f5f5f5; padding: 15px; border-radius: 5px;">
                <p style="font-size: 24px; margin: 0;">
                    <strong>{abs(profit_percent):.2f}%</strong> (–ø–æ—Ä–æ–≥: {alert.threshold:.2f}%)
                </p>
                <p style="font-size: 18px; margin: 10px 0 0 0;">
                    –¢–µ–∫—É—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: <strong>{float(current_value):.2f}</strong> —Ä—É–±.
                </p>
            </div>
            <p style="color: #666; font-size: 12px;">
                –î–∞—Ç–∞: {datetime.now(timezone.utc).astimezone().strftime('%d.%m.%Y %H:%M')}
            </p>
        </body>
        </html>
        """

        message = MessageSchema(
            subject=f"üìä –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ—Ä—Ç—Ñ–µ–ª—è #{alert.portfolio_id}",
            recipients=[email],
            body=html_content,
            subtype="html"
        )

        fm = FastMail(mail_conf)
        await fm.send_message(message)

    async def send_portfolio_tg_alert(self, unique_id: str, alert: AlertPortfolioRead,
                                      current_value: Decimal, profit_percent: float):
        """
        –û—Ç–ø—Ä–∞–≤–∏—Ç—å Telegram-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è

        Args:
            unique_id: –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
            alert: –î–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            current_value: –¢–µ–∫—É—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—è
            profit_percent: –ü—Ä–æ—Ü–µ–Ω—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–æ–∏–º–æ—Å—Ç–∏

        Returns:
            bool: True –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É—Å–ø–µ—à–Ω–∞, False –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        """
        change_type = "üìà –í—ã—Ä–æ—Å" if profit_percent >= 0 else "üìâ –£–ø–∞–¥"
        message_text = (
            f"{change_type} –Ω–∞ {abs(profit_percent):.2f}%\n"
            f"–ü–æ—Ä–æ–≥: {alert.threshold:.2f}%\n"
            f"–¢–µ–∫—É—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {float(current_value):.2f} —Ä—É–±.\n"
            f"–ü–æ—Ä—Ç—Ñ–µ–ª—å #{alert.portfolio_id}"
        )

        async with aiohttp.ClientSession() as session:
            async with session.post(
                    "http://localhost:8000/send_message",
                    headers={"X-Webhook-Secret": os.getenv("WEBHOOK_SECRET")},
                    json={
                        "unique_id": unique_id,
                        "text": message_text
                    }
            ) as response:
                return response.status == 200




